const Reservation = require("../models/Reservation");
const Cart = require("../models/Cart");
const BaseEstablishment = require("../models/BaseEstablishment");
const sendEmail = require("../utils/sendEmail");

exports.createReservation = async (req, res) => {
  try {
    const userId = req.user._id; // R√©cup√©ration de l'ID de l'utilisateur depuis le token
    const userEmail = req.user.email; // R√©cup√©ration de l'email de l'utilisateur depuis le token

    // Charger le panier de l'utilisateur
    const cart = await Cart.findOne({ user: userId });
    if (!cart || cart.items.length === 0) {
      return res.status(400).json({ message: "Votre panier est vide." });
    }

    // Cr√©er la r√©servation
    const reservation = new Reservation({
      user: userId,
      items: cart.items,
      totalPrice: cart.totalPrice,
      status: "EnCours",
    });

    // Enregistrer la r√©servation
    await reservation.save();

    // Vider le panier apr√®s la validation
    cart.items = [];
    cart.totalPrice = 0;
    await cart.save();

    // Envoi de l'email de reservation
    try {
      await sendEmail({
        to: userEmail,
        subject: "Reservation sur Reserv@babi !",
        html: `
          <p>Bonjour,</p>
          <p>Merci d'avoir effectu√© une r√©servation sur <strong>Reserv@babi</strong> !</p>
          <p>Voici les d√©tails de votre r√©servation :</p>
          <ul>
            <li><strong>Nom :</strong> ${req.user.firstname} ${req.user.lastname}</li>
            <li><strong>Email :</strong> ${req.user.email}</li>
            <li><strong>Total :</strong> ${reservation.totalPrice} ‚Ç¨</li>
            <li><strong>Statut :</strong> ${reservation.status}</li>
          </ul>
          <p>Nous vous remercions pour votre confiance.</p>
          <p>Cordialement,</p>
          <p>L'√©quipe de Reserv@babi</p>
        `,
      });
      console.log("üì© Email de confirmation envoy√© √†", userEmail);
    } catch (emailErr) {
      console.error("‚ùå √âchec de l'envoi de l'email :", emailErr.message);
    }

    return res
      .status(201)
      .json({ message: "R√©servation valid√©e avec succ√®s.", reservation });
  } catch (error) {
    return res.status(500).json({ error: error.message });
  }
};

exports.getReservationsByUser = async (req, res) => {
  try {
    const userId = req.user._id;

    const reservations = await Reservation.find({ user: userId })
      .populate("items.establishment")
      .sort({ createdAt: -1 });

    return res.status(200).json({ reservations });
  } catch (error) {
    return res.status(500).json({ error: error.message });
  }
};

exports.cancelReservation = async (req, res) => {
  try {
    const { reservationId } = req.params;
    // const userId = req.user._id;

    // V√©rification de l'existence de la r√©servation
    const reservation = await Reservation.findOne({
      _id: reservationId,
      // user: userId,
    });
    if (!reservation) {
      return res.status(404).json({ message: "R√©servation introuvable." });
    }

    // V√©rifier si la r√©servation est d√©j√† annul√©e
    if (reservation.status === "Annul√©e") {
      return res
        .status(400)
        .json({ message: "La r√©servation est d√©j√† annul√©e." });
    }

    // Mise √† jour du statut de la r√©servation
    reservation.status = "Annul√©e";
    await reservation.save();

    return res
      .status(200)
      .json({ message: "R√©servation annul√©e avec succ√®s.", reservation });
  } catch (error) {
    return res.status(500).json({ error: error.message });
  }
};

exports.confirmReservation = async (req, res) => {
  try {
    const { reservationId } = req.params;
    // const userId = req.user._id;

    // V√©rification de l'existence de la r√©servation
    const reservation = await Reservation.findOne({
      _id: reservationId,
      // user: userId,
    });
    if (!reservation) {
      return res.status(404).json({ message: "R√©servation introuvable." });
    }

    // V√©rifier si la r√©servation est d√©j√† Valid√©e
    if (reservation.status === "Valid√©e") {
      return res
        .status(400)
        .json({ message: "La r√©servation est d√©j√† valid√©e." });
    }

    // Mise √† jour du statut de la r√©servation
    reservation.status = "Valid√©e";
    await reservation.save();

    return res
      .status(200)
      .json({ message: "R√©servation valid√©e avec succ√®s.", reservation });
  } catch (error) {
    return res.status(500).json({ error: error.message });
  }
};

exports.getAllReservations = async (req, res) => {
  try {
    // V√©rifie que c'est bien un superAdmin
    if (req.user.role !== "superAdmin") {
      return res.status(403).json({ message: "Acc√®s refus√©" });
    }

    const reservations = await Reservation.find()
      .populate("user", "firstname lastname email tel")
      .populate("items.establishment", "name type");

    res.status(200).json({ reservations });
  } catch (error) {
    res.status(500).json({ message: "Erreur serveur", error: error.message });
  }
};

exports.getReservationById = async (req, res) => {
  try {
    const { id } = req.params;

    const reservation = await Reservation.findById(id)
      .populate("user", "firstname lastname email")
      .populate("items.establishment", "name type createdBy");

    if (!reservation) {
      return res.status(404).json({ message: "R√©servation non trouv√©e" });
    }

    // Si c‚Äôest un proprio, on v√©rifie s‚Äôil a cr√©√© l‚Äôun des √©tablissements
    if (req.user.role === "proprio") {
      const hasAccess = reservation.items.some(
        (item) =>
          item.establishment?.createdBy?.toString() === req.user._id.toString()
      );

      if (!hasAccess) {
        return res
          .status(403)
          .json({ message: "Vous n'avez pas acc√®s √† cette r√©servation" });
      }
    }

    res.status(200).json({ reservation });
  } catch (error) {
    res.status(500).json({ message: "Erreur serveur", error: error.message });
  }
};

// Obtenir les r√©servations pour les √©tablissements du proprio
exports.getReservationsForProprio = async (req, res) => {
  try {
    // V√©rifier que l'utilisateur est proprio
    if (req.user.role !== "proprio") {
      return res
        .status(403)
        .json({ message: "Acc√®s r√©serv√© aux propri√©taires" });
    }

    // R√©cup√©rer les √©tablissements cr√©√©s par le proprio
    const etablissements = await BaseEstablishment.find({
      createdBy: req.user._id,
    }).select("_id");
    const etablissementIds = etablissements.map((e) => e._id);

    // Rechercher les r√©servations li√©es √† ces √©tablissements
    const reservations = await Reservation.find({
      "items.establishment": { $in: etablissementIds },
    })
      .populate("user", "firstname lastname email")
      .populate("items.establishment");

    res.status(200).json({ reservations });
  } catch (error) {
    res.status(500).json({ message: "Erreur serveur", error: error.message });
  }
};
